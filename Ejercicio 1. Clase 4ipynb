{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOdKyWAjn9irEY1iN68BLhq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"xiWljZcA20DJ","executionInfo":{"status":"ok","timestamp":1758669498096,"user_tz":180,"elapsed":2285,"user":{"displayName":"Mariana López","userId":"04630772594794142754"}}},"outputs":[],"source":["#Primero cargo las librerias\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","from sklearn.model_selection import train_test_split, KFold, cross_val_score, GridSearchCV\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.pipeline import Pipeline\n","from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n"]},{"cell_type":"code","source":["#ahora cargo el data set\n"],"metadata":{"id":"qKEUYtid3usJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"XBgK2pSUnUmR","executionInfo":{"status":"ok","timestamp":1758669588135,"user_tz":180,"elapsed":9523,"user":{"displayName":"Mariana López","userId":"04630772594794142754"}},"outputId":"fc632f80-c4a6-415d-83b2-cda1a6421c67"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-fc59fb25-fc67-44e6-a994-c31fe8f9305e\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-fc59fb25-fc67-44e6-a994-c31fe8f9305e\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving dataset_regresion_multiple.csv to dataset_regresion_multiple.csv\n"]}],"source":["from google.colab import files\n","\n","uploaded = files.upload()"]},{"cell_type":"code","source":["PATH = \"dataset_regresion_multiple.csv\"\n","\n","# lee con ; y convierte a numérico\n","df = pd.read_csv(PATH, sep=\";\")\n","\n","# por si algún valor vino como texto con comas/espacios\n","for c in df.columns:\n","    df[c] = pd.to_numeric(df[c], errors=\"coerce\")\n","\n","df.head(), df.info()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o9gKgU734GRD","executionInfo":{"status":"ok","timestamp":1758669715704,"user_tz":180,"elapsed":57,"user":{"displayName":"Mariana López","userId":"04630772594794142754"}},"outputId":"65fe463a-c2fa-45df-b77e-03f63bbe3f93"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 100 entries, 0 to 99\n","Data columns (total 7 columns):\n"," #   Column            Non-Null Count  Dtype  \n","---  ------            --------------  -----  \n"," 0   edad              100 non-null    int64  \n"," 1   horas_ejercicio   100 non-null    int64  \n"," 2   peso              100 non-null    int64  \n"," 3   estres            100 non-null    int64  \n"," 4   ingresos          100 non-null    int64  \n"," 5   horas_tv          100 non-null    int64  \n"," 6   presion_arterial  100 non-null    float64\n","dtypes: float64(1), int64(6)\n","memory usage: 5.6 KB\n"]},{"output_type":"execute_result","data":{"text/plain":["(   edad  horas_ejercicio  peso  estres  ingresos  horas_tv  presion_arterial\n"," 0    58                7    81       1     21150        12             73.83\n"," 1    48                2    55       1     94740        22             82.26\n"," 2    34                2    81       3     86617        24             90.47\n"," 3    62                0    53       6     36896        34             93.49\n"," 4    27                4    60       7     66175        29             65.74,\n"," None)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["display(df.describe())\n","print(\"Nulos por columna:\\n\", df.isna().sum())\n","\n","corr = df.corr(numeric_only=True)\n","print(\"\\nCorrelación con la presión:\")\n","print(corr[\"presion_arterial\"].sort_values(ascending=False))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":650},"id":"6G-s3U2P4tA5","executionInfo":{"status":"ok","timestamp":1758669826107,"user_tz":180,"elapsed":79,"user":{"displayName":"Mariana López","userId":"04630772594794142754"}},"outputId":"e38bb448-3fa3-4a80-9891-ac3ec694ac1f"},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":["             edad  horas_ejercicio       peso      estres      ingresos  \\\n","count  100.000000       100.000000  100.00000  100.000000    100.000000   \n","mean    41.600000         4.370000   73.28000    4.700000  59778.350000   \n","std     13.311346         3.013957   14.29917    2.512595  23603.253158   \n","min     20.000000         0.000000   50.00000    1.000000  20412.000000   \n","25%     30.000000         2.000000   60.00000    3.000000  38042.000000   \n","50%     41.500000         4.000000   73.00000    5.000000  58634.500000   \n","75%     53.250000         7.000000   84.00000    7.000000  80475.250000   \n","max     64.000000         9.000000   99.00000    9.000000  99605.000000   \n","\n","         horas_tv  presion_arterial  \n","count  100.000000        100.000000  \n","mean    19.760000         85.395000  \n","std     11.136545         20.531869  \n","min      0.000000         38.140000  \n","25%     11.000000         72.045000  \n","50%     18.500000         84.415000  \n","75%     28.250000         98.465000  \n","max     39.000000        137.270000  "],"text/html":["\n","  <div id=\"df-3334306c-817e-4710-acdc-57f06a3f9f28\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>edad</th>\n","      <th>horas_ejercicio</th>\n","      <th>peso</th>\n","      <th>estres</th>\n","      <th>ingresos</th>\n","      <th>horas_tv</th>\n","      <th>presion_arterial</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>100.000000</td>\n","      <td>100.000000</td>\n","      <td>100.00000</td>\n","      <td>100.000000</td>\n","      <td>100.000000</td>\n","      <td>100.000000</td>\n","      <td>100.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>41.600000</td>\n","      <td>4.370000</td>\n","      <td>73.28000</td>\n","      <td>4.700000</td>\n","      <td>59778.350000</td>\n","      <td>19.760000</td>\n","      <td>85.395000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>13.311346</td>\n","      <td>3.013957</td>\n","      <td>14.29917</td>\n","      <td>2.512595</td>\n","      <td>23603.253158</td>\n","      <td>11.136545</td>\n","      <td>20.531869</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>20.000000</td>\n","      <td>0.000000</td>\n","      <td>50.00000</td>\n","      <td>1.000000</td>\n","      <td>20412.000000</td>\n","      <td>0.000000</td>\n","      <td>38.140000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>30.000000</td>\n","      <td>2.000000</td>\n","      <td>60.00000</td>\n","      <td>3.000000</td>\n","      <td>38042.000000</td>\n","      <td>11.000000</td>\n","      <td>72.045000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>41.500000</td>\n","      <td>4.000000</td>\n","      <td>73.00000</td>\n","      <td>5.000000</td>\n","      <td>58634.500000</td>\n","      <td>18.500000</td>\n","      <td>84.415000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>53.250000</td>\n","      <td>7.000000</td>\n","      <td>84.00000</td>\n","      <td>7.000000</td>\n","      <td>80475.250000</td>\n","      <td>28.250000</td>\n","      <td>98.465000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>64.000000</td>\n","      <td>9.000000</td>\n","      <td>99.00000</td>\n","      <td>9.000000</td>\n","      <td>99605.000000</td>\n","      <td>39.000000</td>\n","      <td>137.270000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3334306c-817e-4710-acdc-57f06a3f9f28')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3334306c-817e-4710-acdc-57f06a3f9f28 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3334306c-817e-4710-acdc-57f06a3f9f28');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-4800e2de-8d25-4e06-af8b-b76b869b0572\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4800e2de-8d25-4e06-af8b-b76b869b0572')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-4800e2de-8d25-4e06-af8b-b76b869b0572 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"print(corr[\\\"presion_arterial\\\"]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"edad\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27.59494685172655,\n        \"min\": 13.31134550644371,\n        \"max\": 100.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          41.6,\n          41.5,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"horas_ejercicio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 33.98666710079326,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.37,\n          4.0,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"peso\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.168339574507275,\n        \"min\": 14.299169997809756,\n        \"max\": 100.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          73.28,\n          73.0,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"estres\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 33.82387546858313,\n        \"min\": 1.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.7,\n          5.0,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ingresos\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 33205.00877505104,\n        \"min\": 100.0,\n        \"max\": 99605.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          59778.35,\n          58634.5,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"horas_tv\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.211087924693256,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19.76,\n          18.5,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"presion_arterial\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36.683318260727305,\n        \"min\": 20.53186926598637,\n        \"max\": 137.27,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          85.395,\n          84.41499999999999,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Nulos por columna:\n"," edad                0\n","horas_ejercicio     0\n","peso                0\n","estres              0\n","ingresos            0\n","horas_tv            0\n","presion_arterial    0\n","dtype: int64\n","\n","Correlación con la presión:\n","presion_arterial    1.000000\n","peso                0.588843\n","edad                0.418731\n","estres              0.366368\n","horas_tv            0.040789\n","ingresos           -0.009394\n","horas_ejercicio    -0.358865\n","Name: presion_arterial, dtype: float64\n"]}]},{"cell_type":"code","source":["#mapa de correlacion\n","cols = corr.columns.tolist()\n","plt.figure()\n","im = plt.imshow(corr.values, cmap=\"viridis\")\n","plt.colorbar(im, fraction=0.046, pad=0.04)\n","plt.xticks(range(len(cols)), cols, rotation=45, ha=\"right\")\n","plt.yticks(range(len(cols)), cols)\n","plt.title(\"Matriz de correlaciones\")\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"nOhXsltQ5JJ1","executionInfo":{"status":"ok","timestamp":1758669886447,"user_tz":180,"elapsed":507,"user":{"displayName":"Mariana López","userId":"04630772594794142754"}},"outputId":"6c868d26-6b4b-432d-a60a-827ff451dbca"},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#entrenamos el modelo\n","from sklearn.model_selection import train_test_split\n","\n","y = df[\"presion_arterial\"]\n","X = df.drop(columns=[\"presion_arterial\"])\n","\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, y, test_size=0.2, random_state=42\n",")\n","X_train.shape, X_test.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bTyLmekE5bn9","executionInfo":{"status":"ok","timestamp":1758669959390,"user_tz":180,"elapsed":9,"user":{"displayName":"Mariana López","userId":"04630772594794142754"}},"outputId":"04f312d5-fe83-4e05-a7a4-43074e7eba8a"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((80, 6), (20, 6))"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["pred = base.predict(X_test)\n","\n","mse  = mean_squared_error(y_test, pred)   # sin 'squared'\n","rmse = np.sqrt(mse)                       # RMSE = sqrt(MSE)\n","mae  = mean_absolute_error(y_test, pred)\n","r2   = r2_score(y_test, pred)\n","\n","print(f\"BASE LinearRegression -> RMSE={rmse:.3f}  MAE={mae:.3f}  R²={r2:.3f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BfD18LDO6PW8","executionInfo":{"status":"ok","timestamp":1758670162148,"user_tz":180,"elapsed":15,"user":{"displayName":"Mariana López","userId":"04630772594794142754"}},"outputId":"55bf254a-d41c-45fc-cd47-b6de680ffb1e"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["BASE LinearRegression -> RMSE=10.362  MAE=8.600  R²=0.708\n"]}]},{"cell_type":"code","source":["#modelo 2\n","\n","# definimos las variables que queremos usar\n","features = [\"edad\",\"peso\",\"estres\",\"horas_ejercicio\"]\n","\n","# armamos el pipeline\n","pipe = Pipeline([(\"scale\", StandardScaler()), (\"lin\", LinearRegression())])\n","pipe.fit(X_train[features], y_train)\n","\n","# predecimos\n","pred = pipe.predict(X_test[features])\n","\n","# métricas\n","mse  = mean_squared_error(y_test, pred)\n","rmse = np.sqrt(mse)\n","mae  = mean_absolute_error(y_test, pred)\n","r2   = r2_score(y_test, pred)\n","\n","print(f\"Modelo con {features} -> RMSE={rmse:.3f}  MAE={mae:.3f}  R²={r2:.3f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WJBcMNjq69_d","executionInfo":{"status":"ok","timestamp":1758670423930,"user_tz":180,"elapsed":19,"user":{"displayName":"Mariana López","userId":"04630772594794142754"}},"outputId":"84b11df7-e737-464b-b753-5d48421e1f04"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Modelo con ['edad', 'peso', 'estres', 'horas_ejercicio'] -> RMSE=9.725  MAE=8.228  R²=0.743\n"]}]},{"cell_type":"code","source":["# modelo 3\n","features = [\"ingresos\",\"horas_tv\"]\n","\n","pipe = Pipeline([(\"scale\", StandardScaler()), (\"lin\", LinearRegression())])\n","pipe.fit(X_train[features], y_train)\n","\n","pred = pipe.predict(X_test[features])\n","\n","mse  = mean_squared_error(y_test, pred)\n","rmse = np.sqrt(mse)\n","mae  = mean_absolute_error(y_test, pred)\n","r2   = r2_score(y_test, pred)\n","\n","print(f\"Modelo con {features} -> RMSE={rmse:.3f}  MAE={mae:.3f}  R²={r2:.3f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KKqqJ0rT7d7P","executionInfo":{"status":"ok","timestamp":1758670500620,"user_tz":180,"elapsed":10,"user":{"displayName":"Mariana López","userId":"04630772594794142754"}},"outputId":"fae935e5-10cf-4b86-bd42-f4122cd7bd3b"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Modelo con ['ingresos', 'horas_tv'] -> RMSE=20.136  MAE=16.773  R²=-0.104\n"]}]},{"cell_type":"code","source":["#modelo 4\n","features = [\"edad\",\"peso\"]\n","\n","pipe = Pipeline([(\"scale\", StandardScaler()), (\"lin\", LinearRegression())])\n","pipe.fit(X_train[features], y_train)\n","\n","pred = pipe.predict(X_test[features])\n","\n","mse  = mean_squared_error(y_test, pred)\n","rmse = np.sqrt(mse)\n","mae  = mean_absolute_error(y_test, pred)\n","r2   = r2_score(y_test, pred)\n","\n","print(f\"Modelo con {features} -> RMSE={rmse:.3f}  MAE={mae:.3f}  R²={r2:.3f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C5Chht8z7wyc","executionInfo":{"status":"ok","timestamp":1758670564504,"user_tz":180,"elapsed":10,"user":{"displayName":"Mariana López","userId":"04630772594794142754"}},"outputId":"77e506d3-c0bb-44c7-cb0d-136e416ba670"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Modelo con ['edad', 'peso'] -> RMSE=13.316  MAE=10.990  R²=0.517\n"]}]}]}